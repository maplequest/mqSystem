# pwa script 

here=`pwd`
name=`basename $here`

notouch=""
if [ -f ./CONFIG ]; then
. ./CONFIG
fi

sys="../mqSystem"
if [ ! -d $sys ]; then
  echo "RTFC"
  exit 1
fi

#bump version
version=`cat VERSION`
minor=`echo $version | cut -f 3 -d "."`
minor=`expr $minor + 1`
echo `echo $version | cut -f 1-2 -d "."`".$minor" > VERSION
version=`cat VERSION`

root="$HOME/.mqPWA"
mkdir -p $root
if [ ! -d $root ]; then
  echo "RTFC"
  exit 1
fi


tgt="$HOME/.mqPWA/$version"
mkdir -p $tgt
if [ ! -d $tgt ]; then
  echo "RTFC"
  exit 1
fi

title=`cat TITLE`

# handle icon
icon=""
if [ -f "icon.svg" ]; then
  icon="icon.svg"
fi
if [ -f "icon.obj" ]; then
  icon="icon.obj"
fi
if [ "X$icon" == "X" ]; then
  echo "X$icon"
  echo "Icon missing."
  exit 1
fi
if [ ! -f "icon-16x16.png" ]; then
  $sys/scripts/any2png $icon 16
fi
if [ ! -f "icon-180x180.png" ]; then
  $sys/scripts/any2png $icon 180
fi
if [ ! -f "icon-512x512.png" ]; then
  $sys/scripts/any2png $icon 512
fi

# transfer system and application files
cp $sys/dist/mqSystem.min.js $tgt
cp icon-*x*.png $tgt
files=`find . '!' -wholename "*/internal/*" '!' -name '.git*' '!' -wholename '*/.git/*' '!' -name '*.js' '!' -name 'TITLE' '!' -name 'VERSION' '!' -name 'CONFIG' '!' -name "icon.*" -print`
for extra in $notouch; do
#  echo "ADDING $extra"
  files="$files $extra"
done
for file in $files; do
  if [ -f $file ]; then
    dir=`dirname $file`
    mkdir -p "$tgt/$dir"
    cp "$file" "$tgt/$file"
  fi
done

stringContains() { case $2 in *$1* ) echo "1";; *) echo "0";; esac ; }

# build payload
rm tmp.js 2> /dev/null
alljsfiles=`find . -name "*.js" '!' -name "*.min.js" -print`
jsfiles=""
for jsfile in $alljsfiles; do
  matchfile=`basename $jsfile`
  match=`stringContains "$matchfile" "$notouch"`
#  echo "$jsfile $matchfile $match"
  if [ "$match" == "0" ]; then
    jsfiles="$jsfiles $jsfile"
#  else 
#    echo "REMOVING $jsfile"
  fi
done

minjsfiles=`find . -name "*.min.js" -print`
echo > tmp.js
for jsfile in $jsfiles; do
  cat $jsfile >> tmp.js
done
$sys/scripts/compile tmp.js
if [ -f tmp.min.js ]; then
  for minjsfile in $minjsfiles; do
    cat $minjsfile >> tmp.min.js
  done
  mv tmp.min.js $tgt/mqPayload.min.js
  rm tmp.js
else
  echo "Payload compilation failed."
  exit 1
fi

# build index
cat > $root/index.html  << _EOF
<html lang="en">
<head>
<title>$title</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<meta content='yes' name='apple-mobile-web-app-capable'/>
<meta content='yes' name='mobile-web-app-capable'/>
<link rel="icon" type="image/png" href="/$version/icon-16x16.png">
<link rel="apple-touch-icon" sizes="180x180" href="/$version/icon-180x180.png">
<link rel="manifest" href="/$version/manifest.json">
<meta name="theme-color" content="#ffffff">
<meta name="google" content="notranslate">
</head>
<body>
<script> var mqVersion="$version", mqTitle="$title"; </script>
<script src="/$version/mqSystem.min.js"></script>
<script src="/$version/mqPayload.min.js"></script>
</body>
</html>
_EOF

cat > $tgt/manifest.json << _EOF
{
  "short_name": "$title",
  "name": "$title",
  "scope": "/",
  "icons": [
    {
      "src": "/$version/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "start_url": "/",
  "theme_color": "#ffffff",
  "background_color": "#000000",
  "display": "standalone"
}
_EOF

cat > $root/hotload << _EOF
#!/usr/bin/env python3
from http.server import SimpleHTTPRequestHandler, HTTPServer
import subprocess

class MyHandler(SimpleHTTPRequestHandler):

	def __init__(self,req,client_addr,server):
		SimpleHTTPRequestHandler.__init__(self,req,client_addr,server)

	def do_GET(self):
		if self.path == '/':
			subprocess.run(["bash", "-c", "(cd ${here};${sys}/scripts/build-site)"])
		SimpleHTTPRequestHandler.do_GET(self)

handler = MyHandler
server = HTTPServer(('127.0.0.1', 8000), handler)
subprocess.run(["cmd.exe","/c","start","http://127.0.0.1:8000"])
server.serve_forever()
_EOF
chmod a+x $root/hotload

here=`pwd`
cd $root
cachelist="\"/\", \"/index.html\", \"/service-worker.js\""
cachefiles=`find . -wholename "*/$version/*" -print`
cd "$here"
for cfile in $cachefiles; do
  if [ -d $root/$cfile ]; then
    cfile="$cfile/"
  fi
  cfile=`echo "$cfile" | cut -c 2-`
  cachelist="${cachelist}, \"${cfile}\""
done

cat > $root/service-worker.js  << _EOF
const CACHE_NAME = "${name}-cache-v${version}";
const urlsToCache = [ $cachelist ];
self.addEventListener("install", async (event) => {
  self.skipWaiting();
  event.waitUntil(cache_assets());
});
async function cache_assets() {
  const cache = await self.caches.open(CACHE_NAME);
  return cache.addAll(urlsToCache);
}
self.addEventListener("activate", async (event) => {
  event.waitUntil(delete_old_caches());
});
async function delete_old_caches() {
  const keys = await caches.keys();
  const deletePromises = keys
    .filter((key) => key !== CACHE_NAME)
    .map((key) => self.caches.delete(key));
  return Promise.all(deletePromises);
}
self.addEventListener("fetch", (event) => {
  event.respondWith(get_response(event.request));
});
async function get_response(request) {
  const cache = await self.caches.open(CACHE_NAME);
  const cached_response = await cache.match(request);
  const pending_response = fetch(request).then((response) => {
    cache.put(request, response.clone());
    return response;
  });
  return cached_response || pending_response;
}
_EOF

